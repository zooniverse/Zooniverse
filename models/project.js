// Generated by CoffeeScript 1.6.3
(function() {
  var $, Api, BaseModel, Project, ProjectGroup, _base, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).models == null) {
    _base.models = {};
  }

  BaseModel = window.zooniverse.models.BaseModel || require('./base-model');

  Api = window.zooniverse.Api || require('../lib/api');

  ProjectGroup = window.zooniverse.models.Group || require('./project-group');

  $ = window.jQuery;

  Project = (function(_super) {
    __extends(Project, _super);

    function Project() {
      _ref = Project.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Project.extended = false;

    Project.current = false;

    Project.path = function() {
      return "projects/" + Api.current.project;
    };

    Project.fetch = function() {
      var fetcher, request;
      Project.trigger('fetching');
      fetcher = new $.Deferred();
      fetcher.done(Project.onFetch);
      if (window.DEFINE_ZOONIVERSE_PROJECT != null) {
        fetcher.resolve(window.DEFINE_ZOONIVERSE_PROJECT);
      } else {
        request = Api.current.get(Project.path());
        request.done(function(result) {
          return fetcher.resolve(result);
        });
        request.fail(function() {
          Project.trigger('fetch-fail');
          return fetcher.reject.apply(fetcher, arguments);
        });
      }
      return fetcher;
    };

    Project.onFetch = function(result) {
      var grouper;
      if (result.name === Api.current.project) {
        Project.current = new Project(result);
      }
      Project.trigger('base-fetch', [Project.current]);
      if (!Project.extended) {
        return Project._cleanUpFetch();
      } else {
        grouper = ProjectGroup.fetch();
        return grouper.always(Project._cleanUpFetch);
      }
    };

    Project._cleanUpFetch = function() {
      return Project.trigger('fetch', [Project.current]);
    };

    Project.prototype.id = '';

    Project.prototype.classification_count = 0;

    Project.prototype.complete_count = 0;

    Project.prototype.user_count = 0;

    Project.prototype.subject_count = 0;

    Project.prototype.display_name = '';

    Project.prototype.name = '';

    Project.prototype.site_prefix = '';

    Project.prototype.created_at = '';

    Project.prototype.updated_at = '';

    return Project;

  }).call(this, BaseModel);

  window.zooniverse.models.Project = Project;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Project;
  }

}).call(this);
