// Generated by CoffeeScript 1.6.3
(function() {
  var BaseController, Dialog, focusableElementsSelector, template, translate, _base, _base1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).controllers == null) {
    _base.controllers = {};
  }

  if ((_base1 = window.zooniverse).views == null) {
    _base1.views = {};
  }

  BaseController = zooniverse.controllers.BaseController || require('./base-controller');

  template = zooniverse.views.dialog || require('../views/dialog');

  translate = zooniverse.translate || require('../lib/translate');

  focusableElementsSelector = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]";

  Dialog = (function(_super) {
    __extends(Dialog, _super);

    Dialog.prototype.warning = false;

    Dialog.prototype.error = false;

    Dialog.prototype.content = '';

    Dialog.prototype.className = 'zooniverse-dialog';

    Dialog.prototype.template = template;

    Dialog.prototype.events = {
      'click button[name="close-dialog"]': 'hide',
      'keydown': 'onKeyDown'
    };

    Dialog.prototype.elements = {
      '.dialog': 'contentContainer'
    };

    function Dialog() {
      Dialog.__super__.constructor.apply(this, arguments);
      this.el.css({
        display: 'none'
      });
      if (this.warning) {
        this.el.addClass('warning');
      }
      if (this.error) {
        this.el.addClass('error');
      }
      this.el.attr('role', 'dialog');
      this.el.attr('aria-hidden', 'true');
      this.contentContainer.append(this.content);
      this.focusableContent = this.contentContainer.find('*').filter(focusableElementsSelector);
      Dialog.focussedElement = {};
      this.el.appendTo(document.body);
    }

    Dialog.prototype.onKeyDown = function(e) {
      var focusedElement, focusedIndex, lastIndex;
      if (e.which === 27) {
        this.hide();
      }
      if (e.which === 9) {
        focusedElement = window.jQuery(':focus');
        focusedIndex = this.focusableContent.index(focusedElement);
        lastIndex = this.focusableContent.length - 1;
        if (e.shiftKey) {
          if (focusedIndex === 0) {
            this.focusableContent.get(lastIndex).focus();
            return e.preventDefault();
          }
        } else {
          if (focusedIndex === lastIndex) {
            this.focusableContent.get(0).focus();
            return e.preventDefault();
          }
        }
      }
    };

    Dialog.prototype.show = function() {
      var element, _i, _len, _ref,
        _this = this;
      _ref = this.el.get(0).querySelectorAll("[" + translate.attr + "]");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        translate.refresh(element);
      }
      this.el.css({
        display: ''
      });
      this.el.attr('aria-hidden', 'false');
      Dialog.focussedElement = window.jQuery(':focus');
      return setTimeout(function() {
        _this.el.addClass('showing');
        return _this.contentContainer.find('input, textarea, select').first().focus();
      }, 300);
    };

    Dialog.prototype.hide = function() {
      var _this = this;
      this.el.removeClass('showing');
      if ((Dialog.focussedElement.focus != null) && this.el.is(':visible')) {
        Dialog.focussedElement.focus();
      }
      return setTimeout(function() {
        _this.el.css({
          display: 'none'
        });
        return _this.el.attr('aria-hidden', 'true');
      }, 500);
    };

    return Dialog;

  })(BaseController);

  window.zooniverse.controllers.Dialog = Dialog;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Dialog;
  }

}).call(this);
